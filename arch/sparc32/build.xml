<build condition="SPARC32">

 <dictionary name="openbios-sparc32" init="openbios">
  <object source="tree.fs" target="forth"/>
  <object source="init.fs" target="forth"/>
 </dictionary>

 <library name="sparc32" type="static" target="target">
  <object source="openbios.c"/>
  <object source="console.c"/>
  <object source="lib.c"/>
  <object source="boot.c"/>
  <object source="context.c"/>
  <object source="switch.S"/>
  <object source="udiv.S"/>
  <object source="linux_load.c"/>
  <object source="sys_info.c"/>
  <object source="elfload.c"/>
  <object source="aoutload.c"/>
  <object source="forthload.c"/>
  <object source="loadfs.c"/>
  <object source="romvec.c"/>
 </library>

 <executable name="target/arch/sparc32/entry.o" target="target">
  <rule><![CDATA[ $(SRCDIR)/arch/sparc32/entry.S
	$(CC) $$EXTRACFLAGS $(AS_FLAGS) $(CFLAGS) $(INCLUDES) -c -o $@ $^]]></rule>
 </executable>
 <executable name="target/arch/sparc32/vectors.o" target="target">
  <rule><![CDATA[ $(SRCDIR)/arch/sparc32/vectors.S $(SRCDIR)/arch/sparc32/wof.S $(SRCDIR)/arch/sparc32/wuf.S
	$(CC) $$EXTRACFLAGS $(AS_FLAGS) $(CFLAGS) $(INCLUDES) -c -o $@ $(SRCDIR)/arch/sparc32/vectors.S]]></rule>
 </executable>

 <executable name="openbios-plain.elf" target="target" condition="IMAGE_ELF">
  <rule>
	$(LD) --warn-common -N -T $(SRCDIR)/arch/sparc32/ldscript -o $@.nostrip $^
	$(NM) $@.nostrip | sort > $(ODIR)/openbios-plain.syms
	cp $@.nostrip $@
	$(STRIP) $@</rule>
  <object source="plainboot.c"/>
  <external-object source="target/arch/sparc32/vectors.o"/>
  <external-object source="target/arch/sparc32/entry.o"/>
  <external-object source="libsparc32.a"/>
  <external-object source="libbootstrap.a"/>
  <external-object source="libmodules.a"/>
  <external-object source="libdrivers.a"/>
  <external-object source="liblibc.a"/>
  <external-object source="libfs.a"/>
  <external-object source="libgcc.a"/>
 </executable>

 <!-- HACK ALERT -->

 <executable name="target/include/static-dict.h" target="target" condition="IMAGE_ELF_EMBEDDED">
  <rule><![CDATA[
	@echo "static const char forth_dictionary[] = {" > $@
	@cat $< | hexdump -ve '1/0 "\t" 8/1 "0x%02x, " 1/0 "\n"' \
					| sed 's/0x  ,//g' >> $@
	@echo "};" >> $@]]></rule>
  <external-object source="openbios-sparc32.dict"/>
 </executable>

 <executable name="target/arch/sparc32/builtin.o" target="target" condition="IMAGE_ELF_EMBEDDED">
  <rule><![CDATA[ $(SRCDIR)/arch/sparc32/builtin.c $(ODIR)/target/include/static-dict.h
	$(CC) $$EXTRACFLAGS $(CFLAGS) $(INCLUDES) -c -o $@ $(SRCDIR)/arch/sparc32/builtin.c]]></rule>
 </executable>

 <!-- END OF HACK ALERT -->

 <executable name="openbios-builtin.elf" target="target" condition="IMAGE_ELF_EMBEDDED">
  <rule>
	$(LD) --warn-common -N -T $(SRCDIR)/arch/sparc32/ldscript -o $@.nostrip $^
	$(NM) $@.nostrip | sort > $(ODIR)/openbios-builtin.syms
	cp $@.nostrip $@
	$(STRIP) $@</rule>
  <external-object source="target/arch/sparc32/vectors.o"/>
  <external-object source="target/arch/sparc32/entry.o"/>
  <external-object source="target/arch/sparc32/builtin.o"/>
  <external-object source="libsparc32.a"/>
  <external-object source="libbootstrap.a"/>
  <external-object source="libmodules.a"/>
  <external-object source="libdrivers.a"/>
  <external-object source="liblibc.a"/>
  <external-object source="libfs.a"/>
  <external-object source="libgcc.a"/>
 </executable>

</build>
